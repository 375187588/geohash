/* soapStub.h
   Generated by gSOAP 2.8.17r from httpposttest.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns2	"urn:calc"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns2__pair
#define SOAP_TYPE_ns2__pair (7)
/* ns2:pair */
struct ns2__pair
{
	double a;	/* required element of type xsd:double */
	double b;	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE___ns1__addResponse
#define SOAP_TYPE___ns1__addResponse (12)
/* Operation wrapper: */
struct __ns1__addResponse
{
	double *ns2__addResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE___ns1__add
#define SOAP_TYPE___ns1__add (13)
/* Operation wrapper: */
struct __ns1__add
{
	struct ns2__pair *ns2__add;	/* optional element of type ns2:pair */
};
#endif

#ifndef SOAP_TYPE___ns1__subResponse
#define SOAP_TYPE___ns1__subResponse (15)
/* Operation wrapper: */
struct __ns1__subResponse
{
	double *ns2__subResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE___ns1__sub
#define SOAP_TYPE___ns1__sub (16)
/* Operation wrapper: */
struct __ns1__sub
{
	struct ns2__pair *ns2__sub;	/* optional element of type ns2:pair */
};
#endif

#ifndef SOAP_TYPE___ns1__mulResponse
#define SOAP_TYPE___ns1__mulResponse (18)
/* Operation wrapper: */
struct __ns1__mulResponse
{
	double *ns2__mulResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE___ns1__mul
#define SOAP_TYPE___ns1__mul (19)
/* Operation wrapper: */
struct __ns1__mul
{
	struct ns2__pair *ns2__mul;	/* optional element of type ns2:pair */
};
#endif

#ifndef SOAP_TYPE___ns1__divResponse
#define SOAP_TYPE___ns1__divResponse (21)
/* Operation wrapper: */
struct __ns1__divResponse
{
	double *ns2__divResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE___ns1__div
#define SOAP_TYPE___ns1__div (22)
/* Operation wrapper: */
struct __ns1__div
{
	struct ns2__pair *ns2__div;	/* optional element of type ns2:pair */
};
#endif

#ifndef SOAP_TYPE___ns1__powResponse
#define SOAP_TYPE___ns1__powResponse (24)
/* Operation wrapper: */
struct __ns1__powResponse
{
	double *ns2__powResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE___ns1__pow
#define SOAP_TYPE___ns1__pow (25)
/* Operation wrapper: */
struct __ns1__pow
{
	struct ns2__pair *ns2__pow;	/* optional element of type ns2:pair */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (26)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (27)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (29)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (32)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (33)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__add(struct soap*, struct ns2__pair *ns2__add, double *ns2__addResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__sub(struct soap*, struct ns2__pair *ns2__sub, double *ns2__subResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__mul(struct soap*, struct ns2__pair *ns2__mul, double *ns2__mulResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__div(struct soap*, struct ns2__pair *ns2__div, double *ns2__divResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__pow(struct soap*, struct ns2__pair *ns2__pow, double *ns2__powResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__add(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__sub(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__mul(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__div(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__pow(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__add(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__pair *ns2__add, double *ns2__addResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sub(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__pair *ns2__sub, double *ns2__subResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__mul(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__pair *ns2__mul, double *ns2__mulResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__div(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__pair *ns2__div, double *ns2__divResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__pow(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__pair *ns2__pow, double *ns2__powResponse);

#ifdef __cplusplus
}
#endif

#endif

/* End of soapStub.h */
